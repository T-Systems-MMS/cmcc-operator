/*
 * Copyright (c) 2022. T-Systems Multimedia Solutions GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */

package com.tsystemsmms.cmcc.cmccoperator.components;

import com.tsystemsmms.cmcc.cmccoperator.targetstate.ClientSecretRef;
import io.fabric8.kubernetes.api.model.Secret;
import io.fabric8.kubernetes.api.model.SecretBuilder;

import java.util.Map;

import static com.tsystemsmms.cmcc.cmccoperator.targetstate.TargetState.DATABASE_SECRET_PASSWORD_KEY;
import static com.tsystemsmms.cmcc.cmccoperator.targetstate.TargetState.DATABASE_SECRET_USERNAME_KEY;
import static com.tsystemsmms.cmcc.cmccoperator.utils.Utils.concatOptional;

/**
 * A component that uses a UAPI/Corba client to connect to a Content Server.
 */
public interface HasUapiClient extends Component {
    /**
     * Returns the reference information for the secret.
     *
     * @return reference information
     */
    default ClientSecretRef getUapiClientSecretRef() {
//        if (getSpec().getUapiClientSecret() != null) {
//            return getSpec().getUapiClientSecret();
//        }
        return ClientSecretRef.builder()
                .secretName(getUapiClientSecretName())
                .usernameKey(DATABASE_SECRET_USERNAME_KEY)
                .passwordKey(DATABASE_SECRET_PASSWORD_KEY)
                .build();
    }

    /**
     * Returns the name of the secret for a given UAPI client.
     *
     * @param resourceName name of the resource
     * @return secret name.
     */
    static String getUapiClientSecretName(String resourceName) {
        return concatOptional("uapi", resourceName);
    }

    /**
     * Returns the name of the secret for this UAPI client.
     *
     * @return secret name
     */
    default String getUapiClientSecretName() {
        return getUapiClientSecretName(getResourceName());
    }

    /**
     * The secret name for the UAPI admin account.
     *
     * @return secret name
     */
    static String getUapiClientAdminSecretName() {
        return getUapiClientSecretName("admin");
    }


    /**
     * Returns the default secret. The target state can use this to create a secret if necessary. The password is
     * generated by the target state.
     *
     * @return secret with default values
     */
    default Secret getDefaultUapiClientSecret(String password) {
        return new SecretBuilder()
                .withMetadata(getResourceMetadataForName(getUapiClientSecretName()))
                .withType("Opaque")
                .withData(Map.of(
                        DATABASE_SECRET_USERNAME_KEY, getUapiClientDefaultUsername(),
                        DATABASE_SECRET_PASSWORD_KEY, password
                ))
                .build();
    }

    /**
     * Returns the default UAPI username for this component.
     */
    public abstract String getUapiClientDefaultUsername();
}
